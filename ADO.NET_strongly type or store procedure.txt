Employee.cs
------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CA_ADO_01
{
    internal class Employee
    {
            public int Id { get; set; }
            public string Name { get; set; }
            public float Salary{ get; set; }
         

    }
}
-----------------------------------------------------------
program.cs
--------------
using Microsoft.Extensions.Configuration;

namespace CA_ADO_01
{
    internal class Program
    {
        private static IConfiguration _iconfiguration;
        static void Main(string[] args)
        {
           GetAppSettingsFile();
          //  Console.WriteLine(Directory.GetCurrentDirectory());
           //PrintProduct();
            EmpDisplay();
        }
        static void GetAppSettingsFile()
        {
            var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("Appsettings.json", optional: false, reloadOnChange: true);
            _iconfiguration = builder.Build();
        }
        static void PrintProduct()
        {

            Likedemo lobj =new  Likedemo(_iconfiguration);
            string s1 = "L";
            string s = "L';delete from Product;Select * from Product where Name like 'R";

            //lobj.displayproduct(s1);
            //lobj.displayproduct_p(s);
           // lobj.displayproduct_proc(s1);

           // Productlayer obj = new Productlayer(_iconfiguration);
          //  obj.Products();

            
        }
        static void EmpDisplay()
        {
            //Employee p1 = new Employee {Name = "Raviraj", Salary = 90000 };
            Strongly_type indata = new Strongly_type(_iconfiguration);
           // int a = indata.AddData(p1);
            //Console.WriteLine("{0}", a);

            Console.WriteLine("----------------------------");
           /* Employee r = indata.search(1);
            Console.WriteLine("{0}{1}{2}", r.Id, r.Name, r.Salary);*/

            Console.WriteLine("----------------------------");
            /*List<Employee> pl = indata.search("Raj");
            if (pl != null)
            {
                foreach (var x in pl)
                    Console.WriteLine("{0}{1}{2}", x.Id, x.Name, x.Salary);
            }
            else { Console.WriteLine("record with Raj not found"); }*/
            Console.WriteLine("----------------------------");


            // int no = indata.Del(3);
            // Console.WriteLine("deleted {0}", no);

            List<Employee> ls=indata.GetList();
            foreach (var x in ls)
                Console.WriteLine("{0}  {1}  {2}",x.Id, x.Name, x.Salary);

            Console.ReadLine();

        }

    }

}
--------------------------------------------------------------------
stronglt_type.cs
---------------------
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CA_ADO_01
{
    internal class Strongly_type
    {
        private string _connectionString;
        public Strongly_type(IConfiguration iconfiguration)
        {
            _connectionString = iconfiguration.GetConnectionString("Default");
        }
        public SqlConnection getconnection()
        {
            SqlConnection sqlconn = new SqlConnection();
            sqlconn.ConnectionString = _connectionString;
            return sqlconn;
        }

        public int AddData(Employee e)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd;
            int record = 0;
            try
            {
                sqlconn = getconnection();
                sqlcmd = new SqlCommand("storedata", sqlconn);
                sqlcmd.CommandType = CommandType.StoredProcedure;
              
                sqlcmd.Parameters.Add("@pname", SqlDbType.NVarChar).Value = e.Name;
                sqlcmd.Parameters.AddWithValue("@psalary", SqlDbType.Float).Value = e.Salary;
                sqlconn.Open();
                record = sqlcmd.ExecuteNonQuery();
            }
            catch (SqlException se)
            { Console.WriteLine(se.Message); }
            finally
            {
                sqlconn.Close();
                 }
            return record;

        }
        public Employee search(int id)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd;
           Employee p = null;
            try
            {
                sqlconn = getconnection();
                sqlconn.Open();
                sqlcmd = new SqlCommand("select * from Employee where id=@pid", sqlconn);
                sqlcmd.Parameters.AddWithValue("@pid", id);
                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    while (rd.Read())
                    {
                        // int.TryParse("rd[Id"]", out r) ;
                        p = new Employee();
                        p.Id = Convert.ToInt32(rd["Id"]);
                        p.Name = rd["Name"].ToString();
                        p.Salary = Convert.ToSingle(rd["Salary"]);
                        break;
                    }
                }
            }
            catch (SqlException se)
            { Console.WriteLine(se.Message); }
            finally
            {
                sqlconn.Close();
            }

            return p;
        }
        public List<Employee> search(string name)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd;
            List<Employee> pl = null;
            try
            {

                sqlconn = getconnection();
                sqlconn.Open();
                sqlcmd = new SqlCommand("select * from Employee where name=@pid", sqlconn);
                sqlcmd.Parameters.AddWithValue("@pid", name);
                SqlDataReader rd = sqlcmd.ExecuteReader();
                if (rd.HasRows)
                {
                    pl = new List<Employee>();
                    while (rd.Read())
                    {
                        Employee p = new Employee();
                        p.Id = Convert.ToInt32(rd["Id"]);
                        p.Name = rd["Name"].ToString();
                        p.Salary = Convert.ToSingle(rd["Salary"]);
                        pl.Add(p);
                    }
                }
            }
            catch (SqlException se)
            { Console.WriteLine(se.Message); }
            finally
            {
                sqlconn.Close();

            }

            return pl;
        }
        public int Del(int id)
        {
            SqlConnection sqlconn = null;
            SqlCommand sqlcmd;
            int no = 0;

            using (sqlconn = getconnection())
            {
                try
                {
                    sqlconn.Open();
                    sqlcmd = new SqlCommand("delete from Employee where id=@pid", sqlconn);
                    sqlcmd.Parameters.AddWithValue("@pid", id);
                    no = sqlcmd.ExecuteNonQuery();
                }
                catch (SqlException se)
                { Console.WriteLine(se.Message); }
            }


            return no;
        }
        public List<Employee> GetList()
        {
            var listEmployee = new List<Employee>();
            try
            {
                using (SqlConnection con = new SqlConnection(_connectionString))
                {
                    SqlCommand cmd = new SqlCommand("SP_emp_GET_LIST", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    con.Open();
                    SqlDataReader rdr = cmd.ExecuteReader();
                    while (rdr.Read())
                    {
                        listEmployee.Add(new Employee
                        {
                            Id = Convert.ToInt32(rdr["Id"]),
                            Name = rdr["Name"].ToString(),
                            Salary = Convert.ToSingle(rdr["Salary"])
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return listEmployee;
        }
    }
}
-------------------------------------------------------------------
Appseting.json
-----------------
{
  "ConnectionStrings": {
    "Default": "Data Source=(localdb)\\ProjectModels;Initial Catalog=Demo_Data;Integrated Security=True;"
  }
}

Data Source=(localdb)\ProjectModels;Initial Catalog=Customer;Integrated Security=True;
----------------------------------------------------------------------
storeprocudure
-----------------
Create Procedure spGetProductsByName

@ProductName nvarchar(Max)
as
Begin
 Select * from Product
 where Name like @ProductName + '%'
End




------------------------------------------------------------------------
CREATE PROCEDURE storedata
       @pname     NVARCHAR(Max), 
       @psalary    float
               
AS 
BEGIN 
  INSERT INTO dbo.Employee( Name ,Salary) VALUES ( @pname , @psalary )
  End
------------------------------------------------------------------------
CREATE PROCEDURE storedata
       @pname     NVARCHAR(Max), 
       @paddress  NVARCHAR(Max),
       @pmobile_no  NVARCHAR(Max)  
               
AS 
BEGIN 
  INSERT INTO dbo.Customer( Name ,Address,Mobile_No) VALUES ( @pname , @paddress,@pmobile_no )
  End
------------------------------------------------------------------------
CREATE PROCEDURE SP_cus_GET_LIST
AS 
BEGIN 
  SELECT * FROM customer
  End
------------------------------------------------------------------------
CREATE PROCEDURE storedata
       @pname     NVARCHAR(Max), 
       @paddress    NVARCHAR(Max),
       @pmobile_no    NVARCHAR(Max) 
               
AS 
BEGIN 
  INSERT INTO dbo.Customer( Name , Address , Mobile_No) VALUES ( @pname , @paddress , @mobile_no )
  End

